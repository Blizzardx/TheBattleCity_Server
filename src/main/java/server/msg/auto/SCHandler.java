/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package server.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCHandler implements org.apache.thrift.TBase<SCHandler, SCHandler._Fields>, java.io.Serializable, Cloneable, Comparable<SCHandler> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCHandler");

  private static final org.apache.thrift.protocol.TField PLAYER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerUid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPosition", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField MOVE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("moveDirection", org.apache.thrift.protocol.TType.STRUCT, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCHandlerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCHandlerTupleSchemeFactory());
  }

  public int playerUid; // required
  public server.msg.auto.ThriftVector3 currentPosition; // required
  public server.msg.auto.ThriftVector3 moveDirection; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYER_UID((short)1, "playerUid"),
    CURRENT_POSITION((short)10, "currentPosition"),
    MOVE_DIRECTION((short)20, "moveDirection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYER_UID
          return PLAYER_UID;
        case 10: // CURRENT_POSITION
          return CURRENT_POSITION;
        case 20: // MOVE_DIRECTION
          return MOVE_DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAYERUID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYER_UID, new org.apache.thrift.meta_data.FieldMetaData("playerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_POSITION, new org.apache.thrift.meta_data.FieldMetaData("currentPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, server.msg.auto.ThriftVector3.class)));
    tmpMap.put(_Fields.MOVE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("moveDirection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, server.msg.auto.ThriftVector3.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCHandler.class, metaDataMap);
  }

  public SCHandler() {
  }

  public SCHandler(
    int playerUid,
    server.msg.auto.ThriftVector3 currentPosition,
    server.msg.auto.ThriftVector3 moveDirection)
  {
    this();
    this.playerUid = playerUid;
    setPlayerUidIsSet(true);
    this.currentPosition = currentPosition;
    this.moveDirection = moveDirection;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCHandler(SCHandler other) {
    __isset_bitfield = other.__isset_bitfield;
    this.playerUid = other.playerUid;
    if (other.isSetCurrentPosition()) {
      this.currentPosition = new server.msg.auto.ThriftVector3(other.currentPosition);
    }
    if (other.isSetMoveDirection()) {
      this.moveDirection = new server.msg.auto.ThriftVector3(other.moveDirection);
    }
  }

  public SCHandler deepCopy() {
    return new SCHandler(this);
  }

  @Override
  public void clear() {
    setPlayerUidIsSet(false);
    this.playerUid = 0;
    this.currentPosition = null;
    this.moveDirection = null;
  }

  public int getPlayerUid() {
    return this.playerUid;
  }

  public SCHandler setPlayerUid(int playerUid) {
    this.playerUid = playerUid;
    setPlayerUidIsSet(true);
    return this;
  }

  public void unsetPlayerUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERUID_ISSET_ID);
  }

  /** Returns true if field playerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerUid() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERUID_ISSET_ID);
  }

  public void setPlayerUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERUID_ISSET_ID, value);
  }

  public server.msg.auto.ThriftVector3 getCurrentPosition() {
    return this.currentPosition;
  }

  public SCHandler setCurrentPosition(server.msg.auto.ThriftVector3 currentPosition) {
    this.currentPosition = currentPosition;
    return this;
  }

  public void unsetCurrentPosition() {
    this.currentPosition = null;
  }

  /** Returns true if field currentPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentPosition() {
    return this.currentPosition != null;
  }

  public void setCurrentPositionIsSet(boolean value) {
    if (!value) {
      this.currentPosition = null;
    }
  }

  public server.msg.auto.ThriftVector3 getMoveDirection() {
    return this.moveDirection;
  }

  public SCHandler setMoveDirection(server.msg.auto.ThriftVector3 moveDirection) {
    this.moveDirection = moveDirection;
    return this;
  }

  public void unsetMoveDirection() {
    this.moveDirection = null;
  }

  /** Returns true if field moveDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetMoveDirection() {
    return this.moveDirection != null;
  }

  public void setMoveDirectionIsSet(boolean value) {
    if (!value) {
      this.moveDirection = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAYER_UID:
      if (value == null) {
        unsetPlayerUid();
      } else {
        setPlayerUid((Integer)value);
      }
      break;

    case CURRENT_POSITION:
      if (value == null) {
        unsetCurrentPosition();
      } else {
        setCurrentPosition((server.msg.auto.ThriftVector3)value);
      }
      break;

    case MOVE_DIRECTION:
      if (value == null) {
        unsetMoveDirection();
      } else {
        setMoveDirection((server.msg.auto.ThriftVector3)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYER_UID:
      return Integer.valueOf(getPlayerUid());

    case CURRENT_POSITION:
      return getCurrentPosition();

    case MOVE_DIRECTION:
      return getMoveDirection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAYER_UID:
      return isSetPlayerUid();
    case CURRENT_POSITION:
      return isSetCurrentPosition();
    case MOVE_DIRECTION:
      return isSetMoveDirection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCHandler)
      return this.equals((SCHandler)that);
    return false;
  }

  public boolean equals(SCHandler that) {
    if (that == null)
      return false;

    boolean this_present_playerUid = true;
    boolean that_present_playerUid = true;
    if (this_present_playerUid || that_present_playerUid) {
      if (!(this_present_playerUid && that_present_playerUid))
        return false;
      if (this.playerUid != that.playerUid)
        return false;
    }

    boolean this_present_currentPosition = true && this.isSetCurrentPosition();
    boolean that_present_currentPosition = true && that.isSetCurrentPosition();
    if (this_present_currentPosition || that_present_currentPosition) {
      if (!(this_present_currentPosition && that_present_currentPosition))
        return false;
      if (!this.currentPosition.equals(that.currentPosition))
        return false;
    }

    boolean this_present_moveDirection = true && this.isSetMoveDirection();
    boolean that_present_moveDirection = true && that.isSetMoveDirection();
    if (this_present_moveDirection || that_present_moveDirection) {
      if (!(this_present_moveDirection && that_present_moveDirection))
        return false;
      if (!this.moveDirection.equals(that.moveDirection))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SCHandler other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlayerUid()).compareTo(other.isSetPlayerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerUid, other.playerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentPosition()).compareTo(other.isSetCurrentPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPosition, other.currentPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoveDirection()).compareTo(other.isSetMoveDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoveDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moveDirection, other.moveDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCHandler(");
    boolean first = true;

    sb.append("playerUid:");
    sb.append(this.playerUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPosition:");
    if (this.currentPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.currentPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moveDirection:");
    if (this.moveDirection == null) {
      sb.append("null");
    } else {
      sb.append(this.moveDirection);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (currentPosition != null) {
      currentPosition.validate();
    }
    if (moveDirection != null) {
      moveDirection.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCHandlerStandardSchemeFactory implements SchemeFactory {
    public SCHandlerStandardScheme getScheme() {
      return new SCHandlerStandardScheme();
    }
  }

  private static class SCHandlerStandardScheme extends StandardScheme<SCHandler> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCHandler struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playerUid = iprot.readI32();
              struct.setPlayerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CURRENT_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentPosition = new server.msg.auto.ThriftVector3();
              struct.currentPosition.read(iprot);
              struct.setCurrentPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MOVE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.moveDirection = new server.msg.auto.ThriftVector3();
              struct.moveDirection.read(iprot);
              struct.setMoveDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCHandler struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLAYER_UID_FIELD_DESC);
      oprot.writeI32(struct.playerUid);
      oprot.writeFieldEnd();
      if (struct.currentPosition != null) {
        oprot.writeFieldBegin(CURRENT_POSITION_FIELD_DESC);
        struct.currentPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.moveDirection != null) {
        oprot.writeFieldBegin(MOVE_DIRECTION_FIELD_DESC);
        struct.moveDirection.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCHandlerTupleSchemeFactory implements SchemeFactory {
    public SCHandlerTupleScheme getScheme() {
      return new SCHandlerTupleScheme();
    }
  }

  private static class SCHandlerTupleScheme extends TupleScheme<SCHandler> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCHandler struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayerUid()) {
        optionals.set(0);
      }
      if (struct.isSetCurrentPosition()) {
        optionals.set(1);
      }
      if (struct.isSetMoveDirection()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPlayerUid()) {
        oprot.writeI32(struct.playerUid);
      }
      if (struct.isSetCurrentPosition()) {
        struct.currentPosition.write(oprot);
      }
      if (struct.isSetMoveDirection()) {
        struct.moveDirection.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCHandler struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.playerUid = iprot.readI32();
        struct.setPlayerUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currentPosition = new server.msg.auto.ThriftVector3();
        struct.currentPosition.read(iprot);
        struct.setCurrentPositionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.moveDirection = new server.msg.auto.ThriftVector3();
        struct.moveDirection.read(iprot);
        struct.setMoveDirectionIsSet(true);
      }
    }
  }

}

