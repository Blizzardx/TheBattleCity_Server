/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package server.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BattleFrameData implements org.apache.thrift.TBase<BattleFrameData, BattleFrameData._Fields>, java.io.Serializable, Cloneable, Comparable<BattleFrameData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BattleFrameData");

  private static final org.apache.thrift.protocol.TField FRAME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("frameIndex", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CHAR_COMMAND_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("charCommandList", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BattleFrameDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BattleFrameDataTupleSchemeFactory());
  }

  public int frameIndex; // required
  public List<BattleCharCommand> charCommandList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAME_INDEX((short)10, "frameIndex"),
    CHAR_COMMAND_LIST((short)20, "charCommandList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // FRAME_INDEX
          return FRAME_INDEX;
        case 20: // CHAR_COMMAND_LIST
          return CHAR_COMMAND_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAMEINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("frameIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHAR_COMMAND_LIST, new org.apache.thrift.meta_data.FieldMetaData("charCommandList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BattleCharCommand.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BattleFrameData.class, metaDataMap);
  }

  public BattleFrameData() {
  }

  public BattleFrameData(
    int frameIndex,
    List<BattleCharCommand> charCommandList)
  {
    this();
    this.frameIndex = frameIndex;
    setFrameIndexIsSet(true);
    this.charCommandList = charCommandList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BattleFrameData(BattleFrameData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.frameIndex = other.frameIndex;
    if (other.isSetCharCommandList()) {
      List<BattleCharCommand> __this__charCommandList = new ArrayList<BattleCharCommand>(other.charCommandList.size());
      for (BattleCharCommand other_element : other.charCommandList) {
        __this__charCommandList.add(new BattleCharCommand(other_element));
      }
      this.charCommandList = __this__charCommandList;
    }
  }

  public BattleFrameData deepCopy() {
    return new BattleFrameData(this);
  }

  @Override
  public void clear() {
    setFrameIndexIsSet(false);
    this.frameIndex = 0;
    this.charCommandList = null;
  }

  public int getFrameIndex() {
    return this.frameIndex;
  }

  public BattleFrameData setFrameIndex(int frameIndex) {
    this.frameIndex = frameIndex;
    setFrameIndexIsSet(true);
    return this;
  }

  public void unsetFrameIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMEINDEX_ISSET_ID);
  }

  /** Returns true if field frameIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMEINDEX_ISSET_ID);
  }

  public void setFrameIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMEINDEX_ISSET_ID, value);
  }

  public int getCharCommandListSize() {
    return (this.charCommandList == null) ? 0 : this.charCommandList.size();
  }

  public java.util.Iterator<BattleCharCommand> getCharCommandListIterator() {
    return (this.charCommandList == null) ? null : this.charCommandList.iterator();
  }

  public void addToCharCommandList(BattleCharCommand elem) {
    if (this.charCommandList == null) {
      this.charCommandList = new ArrayList<BattleCharCommand>();
    }
    this.charCommandList.add(elem);
  }

  public List<BattleCharCommand> getCharCommandList() {
    return this.charCommandList;
  }

  public BattleFrameData setCharCommandList(List<BattleCharCommand> charCommandList) {
    this.charCommandList = charCommandList;
    return this;
  }

  public void unsetCharCommandList() {
    this.charCommandList = null;
  }

  /** Returns true if field charCommandList is set (has been assigned a value) and false otherwise */
  public boolean isSetCharCommandList() {
    return this.charCommandList != null;
  }

  public void setCharCommandListIsSet(boolean value) {
    if (!value) {
      this.charCommandList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAME_INDEX:
      if (value == null) {
        unsetFrameIndex();
      } else {
        setFrameIndex((Integer)value);
      }
      break;

    case CHAR_COMMAND_LIST:
      if (value == null) {
        unsetCharCommandList();
      } else {
        setCharCommandList((List<BattleCharCommand>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAME_INDEX:
      return Integer.valueOf(getFrameIndex());

    case CHAR_COMMAND_LIST:
      return getCharCommandList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAME_INDEX:
      return isSetFrameIndex();
    case CHAR_COMMAND_LIST:
      return isSetCharCommandList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BattleFrameData)
      return this.equals((BattleFrameData)that);
    return false;
  }

  public boolean equals(BattleFrameData that) {
    if (that == null)
      return false;

    boolean this_present_frameIndex = true;
    boolean that_present_frameIndex = true;
    if (this_present_frameIndex || that_present_frameIndex) {
      if (!(this_present_frameIndex && that_present_frameIndex))
        return false;
      if (this.frameIndex != that.frameIndex)
        return false;
    }

    boolean this_present_charCommandList = true && this.isSetCharCommandList();
    boolean that_present_charCommandList = true && that.isSetCharCommandList();
    if (this_present_charCommandList || that_present_charCommandList) {
      if (!(this_present_charCommandList && that_present_charCommandList))
        return false;
      if (!this.charCommandList.equals(that.charCommandList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BattleFrameData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrameIndex()).compareTo(other.isSetFrameIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameIndex, other.frameIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharCommandList()).compareTo(other.isSetCharCommandList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharCommandList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charCommandList, other.charCommandList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BattleFrameData(");
    boolean first = true;

    sb.append("frameIndex:");
    sb.append(this.frameIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charCommandList:");
    if (this.charCommandList == null) {
      sb.append("null");
    } else {
      sb.append(this.charCommandList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BattleFrameDataStandardSchemeFactory implements SchemeFactory {
    public BattleFrameDataStandardScheme getScheme() {
      return new BattleFrameDataStandardScheme();
    }
  }

  private static class BattleFrameDataStandardScheme extends StandardScheme<BattleFrameData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BattleFrameData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // FRAME_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameIndex = iprot.readI32();
              struct.setFrameIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CHAR_COMMAND_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.charCommandList = new ArrayList<BattleCharCommand>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  BattleCharCommand _elem18;
                  _elem18 = new BattleCharCommand();
                  _elem18.read(iprot);
                  struct.charCommandList.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setCharCommandListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BattleFrameData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FRAME_INDEX_FIELD_DESC);
      oprot.writeI32(struct.frameIndex);
      oprot.writeFieldEnd();
      if (struct.charCommandList != null) {
        oprot.writeFieldBegin(CHAR_COMMAND_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.charCommandList.size()));
          for (BattleCharCommand _iter19 : struct.charCommandList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BattleFrameDataTupleSchemeFactory implements SchemeFactory {
    public BattleFrameDataTupleScheme getScheme() {
      return new BattleFrameDataTupleScheme();
    }
  }

  private static class BattleFrameDataTupleScheme extends TupleScheme<BattleFrameData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BattleFrameData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFrameIndex()) {
        optionals.set(0);
      }
      if (struct.isSetCharCommandList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFrameIndex()) {
        oprot.writeI32(struct.frameIndex);
      }
      if (struct.isSetCharCommandList()) {
        {
          oprot.writeI32(struct.charCommandList.size());
          for (BattleCharCommand _iter20 : struct.charCommandList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BattleFrameData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.frameIndex = iprot.readI32();
        struct.setFrameIndexIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.charCommandList = new ArrayList<BattleCharCommand>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            BattleCharCommand _elem23;
            _elem23 = new BattleCharCommand();
            _elem23.read(iprot);
            struct.charCommandList.add(_elem23);
          }
        }
        struct.setCharCommandListIsSet(true);
      }
    }
  }

}

